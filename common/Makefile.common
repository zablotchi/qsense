################
# Local settings
################

# STM
ESTMDIR		?= SET_ESTM_PATH
TINYSTMDIR 	?= SET_TINYSTM_PATH
TINY098DIR 	?= SET_TINY098_PATH
WLPDSTMDIR	?= SET_SWISSTM_PATH
TL2DIR		?= SET_TL2_PATH
XBDIR 		?= SET_XBOOST_PATH

# Compiler
SOLARIS_CC1 	?= /opt/csw/bin/gcc
SOLARIS_CC2 	?= /usr/sfw/bin/gcc
TILERA_CC	?= tile-gcc
CC ?= gcc

VERSION         ?= O3
ifeq ($(VERSION),DEBUG)
	CFLAGS	+= -g -DDEBUG -O0
endif
ifeq ($(VERSION),SYMBOL)
	CFLAGS	+= -O3 -g
endif
ifeq ($(VERSION),O0)
	CFLAGS	+= -O0
endif
ifeq ($(VERSION),O1)
	CFLAGS	+= -O1
endif
ifeq ($(VERSION),O2)
	CFLAGS	+= -O2
endif
ifeq ($(VERSION),O3)
	CFLAGS	+= -O3
endif


# Compile with global lock
ifeq ($(GRANULARITY),GLOBAL_LOCK)
     CFLAGS	+= -DLL_GLOBAL_LOCK
     BIN_SUFFIX = _gl
endif
ifeq ($(G),GL)
     CFLAGS	+= -DLL_GLOBAL_LOCK
     BIN_SUFFIX = _gl
endif


CFLAGS += -D_GNU_SOURCE

ROOT 		?= ../..
BINDIR		?= $(ROOT)/bin
BUILDIR		?= $(ROOT)/build

$(shell [ -d "$(BUILDIR)" ] || mkdir -p $(BUILDIR))
$(shell [ -d "$(BINDIR)" ] || mkdir -p $(BINDIR))

# Path to LIBATOMIC_OPS (or to gcc-specific libatomic_ops)
ifdef LIBAO_HOME
  LIBAO_INC = $(LIBAO_HOME)/include
else
  LIBAO_INC = $(ROOT)/src/atomic_ops
endif

LIBSSMEM = $(ROOT)/external
TCMALLOC_PATH = /usr/local
JEMALLOC_PATH = /usr/local

ifndef STM
  LOCK          ?= TAS
endif

ifeq ($(STM),SEQUENTIAL)
  CFLAGS	+= -DSEQUENTIAL
endif
ifeq ($(STM),LOCKFREE)
  CFLAGS	+= -DLOCKFREE
endif

#############################
# Platform dependent settings
#############################
#
# GCC thread-local storage requires "significant 
# support from the linker (ld), dynamic linker
# (ld.so), and system libraries (libc.so and libpthread.so), so it is
# not available everywhere." source: GCC-doc.
#
# pthread_spinlock is replaced by pthread_mutex 
# on MacOS X, as it might not be supported. 
# Comment LOCK = MUTEX below to enable.

ifndef OS_NAME
    OS_NAME = $(shell uname -s)
endif

ifeq ($(OS_NAME), Darwin)
    OS = MacOS
    DEFINES += -UTLS
    LOCK = MUTEX
endif

ifeq ($(OS_NAME), Linux)
    OS = Linux
    DEFINES += -DTLS
endif

ifeq ($(OS_NAME), SunOS)
    OS = Solaris
    CC = $(SOLARIS_CC1)
    DEFINES += -DTLS
endif

ifndef STM
    CFLAGS += -D$(LOCK)
endif

#################################
# Management PC specific settings
#################################

ifndef PC_NAME
	PC_NAME = $(shell uname -n)
endif

ifeq ($(PC_NAME), parsasrv1.epfl.ch)
    OS = Linux
    CC = $(TILERA_CC)
    LDFLAGS += -ltmc
    PLATFORM_NUMA = 1
    ARCH = tile
    ARCH_NAME = tile
endif

ifeq ($(PC_NAME), lpd48core)
    CC = gcc-4.8
    CFLAGS += -DOPTERON -DPLATFORM_MCORE 
    PLATFORM_NUMA = 1
endif

ifeq ($(PC_NAME), lpdxeon2680)
    CFLAGS += -DLPDXEON -DPLATFORM_MCORE
    PLATFORM_NUMA = 1
    TCMALLOC_PATH = /home/zablotch
    JEMALLOC_PATH = /home/zablotch
endif

ifeq ($(PC_NAME), iccluster033)
    PLATFORM_KNOWN = 1
    CFLAGS += -DICCLUSTER -DPLATFORM_MCORE
    PLATFORM_NUMA = 0   
endif

ifeq ($(PC_NAME), lpdpc34)
    CFLAGS += -DHASWELL 
    PLATFORM_NUMA = 0
endif

ifeq ($(PC_NAME), lpdpc4)
    CFLAGS += -DLPDPC4
    PLATFORM_NUMA = 0
endif

ifeq ($(PC_NAME), diassrv8)
    CFLAGS += -DXEON -DPLATFORM_MCORE
    PLATFORM_NUMA = 1
endif

ifeq ($(PC_NAME), maglite)
    CC = $(SOLARIS_CC1)
    CFLAGS += -DMAGLITE
endif

ifeq ($(PC_NAME), ol-collab1)
ifdef LOCK
    LOCK = TICKET
endif
    CC = $(SOLARIS_CC2)
    CFLAGS += -DT44
endif

ifeq ($(PC_NAME), trigonak-laptop)
    CFLAGS += -DLAPTOP
endif

ifeq ($(PC_NAME), ubuntu)
    CFLAGS += -DIGORLAPTOPLINUX
endif

ifeq ($(PC_NAME), oana-MacBookPro)
    CFLAGS += -DOANALAPTOPLINUX
endif

#################################
# Architecture dependent settings
#################################

ifndef ARCH
    ARCH_NAME = $(shell uname -m)
endif

ifeq ($(ARCH_NAME), i386)
    ARCH = x86
    CFLAGS += -m32
    LDFLAGS += -m32
    SSPFD = -lsspfd_x86
    LDFLAGS += -L$(LIBSSMEM)/lib -lssmem_x86
endif

ifeq ($(ARCH_NAME), i686)
    ARCH = x86
    CFLAGS += -m32
    LDFLAGS += -m32
    SSPFD = -lsspfd_x86
    LDFLAGS += -L$(LIBSSMEM)/lib -lssmem_x86
endif

ifeq ($(ARCH_NAME), x86_64)
    ARCH = x86_64
    CFLAGS += -m64
    LDFLAGS += -m64
    SSPFD = -lsspfd_x86_64
    LDFLAGS += -L$(LIBSSMEM)/lib -lssmem_x86_64
endif

ifeq ($(ARCH_NAME), sun4v)
    ARCH = sparc64
    CFLAGS += -DSPARC=1 -DINLINED=1 -m64
    LDFLAGS += -lrt -m64
    SSPFD = -lsspfd_sparc64
    LDFLAGS += -L$(LIBSSMEM)/lib -lssmem_sparc64
endif

ifeq ($(ARCH_NAME), tile)
    LDFLAGS += -L$(LIBSSMEM)/lib -lssmem_tile
    SSPFD = -lsspfd_tile
endif


ifeq ($(PLATFORM_NUMA), 1)
    LDFLAGS += -lnuma
endif


#################
# Global settings
#################

CFLAGS += -Wall
CFLAGS += -fno-strict-aliasing
CFLAGS += -I$(LIBAO_INC) -I$(ROOT)/include -I$(LIBSSMEM)/include

LDFLAGS += -lpthread -lrt -lm

ifeq ($(MALLOC), 1)
    LDFLAGS += -l:libtcmalloc_minimal.so.4
endif

ifdef STM
  ifneq ($(STM), SEQUENTIAL)
	ifneq ($(STM), LOCKFREE) 
	  CFLAGS += -I$(INCDIR)
	  LDFLAGS += -L$(LIBDIR) -l$(TM)
	endif
  endif
endif

######################
# compilation settings
######################

TEST_FILE = test_simple.c
ifeq ($(TEST),old)
	TEST_FILE = test.c
	CFLAGS += -DGC=0
else
    ifeq ($(TEST), time)
        TEST_FILE = test_time.c
        CFLAGS += -DTEST_TIME
    endif 

    ifeq ($(TEST), multi_insert)
        TEST_FILE = test_simple_multiinsert.c
    endif 

	ifeq ($(TEST),correct)
		TEST_FILE=test_correct.c
		CFLAGS += -DGC=1

	else
		ifeq ($(GC),0)
			CFLAGS += -DGC=0
		else
			CFLAGS += -DGC=1
		endif
	endif

endif

ifeq ($(INIT_SEQ), 1)
    CFLAGS += -DINIT_SEQ
endif


ifeq ($(MALLOC), 1)
    CFLAGS += -DSSALLOC_USE_MALLOC
endif

ifeq ($(LATENCY),1)
	CFLAGS += -DCOMPUTE_LATENCY -DDO_TIMINGS
endif

ifeq ($(LATENCY),2)
	CFLAGS += -DCOMPUTE_LATENCY -DDO_TIMINGS -DUSE_SSPFD -DLATENCY_ALL_CORES=0
	LDFLAGS += $(SSPFD) -lm
endif

ifeq ($(LATENCY),3)
	CFLAGS += -DCOMPUTE_LATENCY -DDO_TIMINGS -DUSE_SSPFD -DLATENCY_ALL_CORES=1
	LDFLAGS += $(SSPFD) -lm
endif

ifeq ($(LATENCY),4)
	CFLAGS += -DCOMPUTE_LATENCY -DDO_TIMINGS -DUSE_SSPFD -DLATENCY_PARSING=1
	LDFLAGS += $(SSPFD) -lm
endif

ifeq ($(LATENCY),5)
	CFLAGS += -DCOMPUTE_LATENCY -DDO_TIMINGS -DUSE_SSPFD -DLATENCY_PARSING=1 -DLATENCY_ALL_CORES=1
	LDFLAGS += $(SSPFD) -lm
endif

ifeq ($(OPT_P), 1)
    CFLAGS += -DOPT_P
endif

ifeq ($(OPT_R), 1)
    CFLAGS += -DOPT_R
endif

ifeq ($(OPT_B), 1)
    CFLAGS += -DOPT_B
endif


ifeq ($(INIT),one)
	CFLAGS += -DINITIALIZE_FROM_ONE=1
else
	CFLAGS += -DINITIALIZE_FROM_ONE=0
endif

ifeq ($(SET_CPU),0)
	CFLAGS += -DNO_SET_CPU
endif

LFSL=herlihy
LBSL=herlihy
ifeq ($(LBSL),herlihy)
	CFLAGS += -DLBSL=1
else
	CFLAGS += -DLBSL=2
endif

ifeq ($(POWER),1)
	CFLAGS += -DRAPL_READ_ENABLE=1
	LDFLAGS += -lraplread -lm
endif

ifeq ($(STATS),1)
	CFLAGS += -DRETRY_STATS=1
endif

ifeq ($(PAD),1)
	CFLAGS += -DDO_PAD=1
endif

ifeq ($(SEQ_NO_FREE),1)
	CFLAGS += -DSEQ_SSMEM_NO_FREE=1
endif

